/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface DigitalProductStoreInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addProduct"
      | "deactivateProduct"
      | "getProduct"
      | "getProductLength"
      | "hasPurchased"
      | "hasUserPurchased"
      | "productSales"
      | "products"
      | "purchaseProduct"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "ProductAdded" | "ProductPurchased"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addProduct",
    values: [string, string, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deactivateProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProduct",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProductLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasPurchased",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "hasUserPurchased",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "productSales",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "products",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseProduct",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deactivateProduct",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProduct", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProductLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasUserPurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "productSales",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "products", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseProduct",
    data: BytesLike
  ): Result;
}

export namespace ProductAddedEvent {
  export type InputTuple = [
    productId: BigNumberish,
    name: string,
    price: BigNumberish,
    seller: AddressLike
  ];
  export type OutputTuple = [
    productId: bigint,
    name: string,
    price: bigint,
    seller: string
  ];
  export interface OutputObject {
    productId: bigint;
    name: string;
    price: bigint;
    seller: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProductPurchasedEvent {
  export type InputTuple = [
    buyer: AddressLike,
    productId: BigNumberish,
    seller: AddressLike,
    price: BigNumberish
  ];
  export type OutputTuple = [
    buyer: string,
    productId: bigint,
    seller: string,
    price: bigint
  ];
  export interface OutputObject {
    buyer: string;
    productId: bigint;
    seller: string;
    price: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DigitalProductStore extends BaseContract {
  connect(runner?: ContractRunner | null): DigitalProductStore;
  waitForDeployment(): Promise<this>;

  interface: DigitalProductStoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addProduct: TypedContractMethod<
    [name: string, link: string, price: BigNumberish, seller: AddressLike],
    [void],
    "nonpayable"
  >;

  deactivateProduct: TypedContractMethod<
    [productId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getProduct: TypedContractMethod<
    [productId: BigNumberish],
    [
      [string, string, bigint, string, boolean] & {
        name: string;
        link: string;
        price: bigint;
        seller: string;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getProductLength: TypedContractMethod<[], [bigint], "view">;

  hasPurchased: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;

  hasUserPurchased: TypedContractMethod<
    [user: AddressLike, productId: BigNumberish],
    [boolean],
    "view"
  >;

  productSales: TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;

  products: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, boolean] & {
        name: string;
        link: string;
        price: bigint;
        seller: string;
        isActive: boolean;
      }
    ],
    "view"
  >;

  purchaseProduct: TypedContractMethod<
    [productId: BigNumberish],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addProduct"
  ): TypedContractMethod<
    [name: string, link: string, price: BigNumberish, seller: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deactivateProduct"
  ): TypedContractMethod<[productId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getProduct"
  ): TypedContractMethod<
    [productId: BigNumberish],
    [
      [string, string, bigint, string, boolean] & {
        name: string;
        link: string;
        price: bigint;
        seller: string;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProductLength"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasPurchased"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasUserPurchased"
  ): TypedContractMethod<
    [user: AddressLike, productId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "productSales"
  ): TypedContractMethod<[arg0: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "products"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, bigint, string, boolean] & {
        name: string;
        link: string;
        price: bigint;
        seller: string;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "purchaseProduct"
  ): TypedContractMethod<[productId: BigNumberish], [void], "payable">;

  getEvent(
    key: "ProductAdded"
  ): TypedContractEvent<
    ProductAddedEvent.InputTuple,
    ProductAddedEvent.OutputTuple,
    ProductAddedEvent.OutputObject
  >;
  getEvent(
    key: "ProductPurchased"
  ): TypedContractEvent<
    ProductPurchasedEvent.InputTuple,
    ProductPurchasedEvent.OutputTuple,
    ProductPurchasedEvent.OutputObject
  >;

  filters: {
    "ProductAdded(uint256,string,uint256,address)": TypedContractEvent<
      ProductAddedEvent.InputTuple,
      ProductAddedEvent.OutputTuple,
      ProductAddedEvent.OutputObject
    >;
    ProductAdded: TypedContractEvent<
      ProductAddedEvent.InputTuple,
      ProductAddedEvent.OutputTuple,
      ProductAddedEvent.OutputObject
    >;

    "ProductPurchased(address,uint256,address,uint256)": TypedContractEvent<
      ProductPurchasedEvent.InputTuple,
      ProductPurchasedEvent.OutputTuple,
      ProductPurchasedEvent.OutputObject
    >;
    ProductPurchased: TypedContractEvent<
      ProductPurchasedEvent.InputTuple,
      ProductPurchasedEvent.OutputTuple,
      ProductPurchasedEvent.OutputObject
    >;
  };
}
